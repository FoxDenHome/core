{ nixpkgs, foxDenLib, ... }:
let
  util = foxDenLib.util;
  eSA = nixpkgs.lib.strings.escapeShellArg;

  interfaceType = with nixpkgs.lib.types; submodule {
    options = {
      driver = nixpkgs.lib.mkOption {
        type = enum (nixpkgs.lib.attrsets.attrNames foxDenLib.hosts.drivers);
      };
      driverOpts = nixpkgs.lib.mkOption {
        type = attrsOf anything; # TODO: Host driver schema
        default = {};
      };
      dns = {
        name = nixpkgs.lib.mkOption {
          type = str;
          default = "";
        };
        zone = nixpkgs.lib.mkOption {
          type = str;
          default = "foxden.network";
        };
        ttl = nixpkgs.lib.mkOption {
          type = ints.positive;
          default = 3600;
        };
      };
      addresses = nixpkgs.lib.mkOption {
        type = listOf foxDenLib.types.ip;
      };
      routes = nixpkgs.lib.mkOption {
        type = nullOr (listOf routeType);
        default = null;
      };
    };
  };

  routeType = with nixpkgs.lib.types; submodule {
    options = {
      Destination = nixpkgs.lib.mkOption {
        type = nullOr foxDenLib.types.ip;
        default = null;
      };
      Gateway = nixpkgs.lib.mkOption {
        type = nullOr foxDenLib.types.ipWithoutCidr;
        default = null;
      };
    };
  };

  hostType = with nixpkgs.lib.types; submodule {
    options = {
      interfaces = nixpkgs.lib.mkOption {
        type = attrsOf interfaceType;
      };
      cloneRoutes = nixpkgs.lib.mkOption {
        type = bool;
        default = true;
        description = "Whether to clone the main interface routes into this host's namespace";
      };
    };
  };

  getByName = (config: name: let
    namespace = "host-${name}";
  in {
    inherit name;
    namespace = namespace;
    namespacePath = "/run/netns/${namespace}";
    unit = "netns-host-${name}.service";
    resolvConf = "/etc/foxden/hosts/resolv.conf";
    suffix = util.mkHash8 name;
  } // config.foxDen.hosts.hosts.${name});
in
{
  getByName = getByName;

  nixosModule = ({ config, pkgs, foxDenLib, ... }:
  let
    hosts = map (getByName config) (nixpkgs.lib.attrsets.attrNames config.foxDen.hosts.hosts);
    ifcfg = config.foxDen.hosts.ifcfg;

    mapIfaces = (host: map ({ name, value }: value // { inherit host name; suffix = util.mkHash8 (host.name + "|" + name); }) (nixpkgs.lib.attrsets.attrsToList host.interfaces));
    interfaces = nixpkgs.lib.flatten (map mapIfaces hosts);
  in
  {
    options.foxDen.hosts = {
      hosts = with nixpkgs.lib.types; nixpkgs.lib.mkOption {
        type = attrsOf hostType;
        default = {};
      };

      ifcfg = with nixpkgs.lib.types; {
        dns = nixpkgs.lib.mkOption {
          type = listOf foxDenLib.types.ipWithoutCidr;
        };
        addresses = nixpkgs.lib.mkOption {
          type = listOf foxDenLib.types.ip;
          default = [];
        };
        routes = nixpkgs.lib.mkOption {
          type = listOf routeType;
          default = [];
        };
        interface = with nixpkgs.lib.types; nixpkgs.lib.mkOption {
          type = str;
        };
        network = with nixpkgs.lib.types; nixpkgs.lib.mkOption {
          type = str;
        };
      };
    };

    config = {
      foxDen.hosts.ifcfg.network = nixpkgs.lib.mkDefault "40-${ifcfg.interface}";

      foxDen.dns.records = nixpkgs.lib.flatten (map
          (iface: let
            mkRecord = (addr: nixpkgs.lib.mkIf (iface.dns.name != "") {
              zone = iface.dns.zone;
              name = iface.dns.name;
              type = if (util.isIPv6 addr) then "AAAA" else "A";
              ttl = iface.dns.ttl;
              value = util.removeIPCidr addr;
              horizon = if (util.isPrivateIP addr) then "internal" else "external";
            });
          in
          (map mkRecord iface))
        interfaces);

      environment.etc."foxden/hosts/resolv.conf".text = ''
        # Generated by foxDen
        ${nixpkgs.lib.concatMapStrings (ns: "nameserver ${ns}\n") config.foxDen.hosts.ifcfg.dns}
      '';

      systemd = nixpkgs.lib.mkMerge (
        (map ({ name, value } : (value.build {
          interfaces = (nixpkgs.lib.filter (iface: iface.driver == name) interfaces);
          inherit ifcfg;
        }).config.systemd) (nixpkgs.lib.attrsets.attrsToList foxDenLib.hosts.drivers))
        ++ [{
          # Configure host/primary network/bridge
          network.networks."${config.foxDen.hosts.ifcfg.network}" = {
            name = ifcfg.interface;
            routes = ifcfg.routes;
            address = ifcfg.addresses;
            dns = ifcfg.dns;

            networkConfig = {
              DHCP = "no";
              IPv6AcceptRA = false;
            };
          };

          # Configure each host's NetNS
          services = (nixpkgs.lib.attrsets.listToAttrs (map (host: let
            ipCmd = eSA "${pkgs.iproute2}/bin/ip";
            ipInNsCmd = "${ipCmd} netns exec ${eSA host.namespace} ${ipCmd}";

            renderRoute = (dev: route: "${ipInNsCmd} route add " + (if route.Destination != null then eSA route.Destination else "default") + (if route.Gateway != null then " via ${eSA route.Gateway}" else " dev ${eSA dev}"));

            mkInterfaceStartConfig = (interface: let
              ifaceDriver = foxDenLib.hosts.drivers.${interface.driver};
              serviceInterface = (ifaceDriver.serviceInterface or (interface: "host${interface.suffix}")) interface;
              ifaceRoutes = ((ifaceDriver.routes or (interface: [])) interface) ++ (if interface.routes != null then interface.routes else []);
              driverRunParams = { inherit ipCmd ipInNsCmd serviceInterface interface; };
            in
              (ifaceDriver.execStart driverRunParams)
                ++ [ "${ipCmd} link set ${eSA serviceInterface} netns ${eSA host.namespace}" ]
                ++ (map (addr:
                      "${ipInNsCmd} addr add ${eSA addr} dev ${eSA serviceInterface}")
                      interface.addresses)
                ++ [ "${ipInNsCmd} link set ${eSA serviceInterface} up" ]
                ++ (map (renderRoute serviceInterface) ifaceRoutes)
            );
          in
          {
            name = (nixpkgs.lib.strings.removeSuffix ".service" host.unit);
            value = {
              description = "NetNS ${host.namespace}";
              unitConfig = {
                After = [ "network-pre.target" ];
              };
              serviceConfig = {
                Type = "oneshot";
                RemainAfterExit = true;

                ExecStart = [
                  "-${ipCmd} netns del ${eSA host.namespace}"
                  "${ipCmd} netns add ${eSA host.namespace}"
                  "${ipInNsCmd} addr add 127.0.0.1/8 dev lo"
                  "${ipInNsCmd} addr add ::1/128 dev lo noprefixroute"
                  "${ipInNsCmd} link set lo up"
                ]
                ++ (nixpkgs.lib.flatten (map mkInterfaceStartConfig (nixpkgs.lib.filter (iface: iface.host.name == host.name) interfaces)))
                ++ (map (renderRoute "lo") (if host.cloneRoutes then ifcfg.routes else []));

                ExecStop = [ # TODO: Re-implement interface shutdown
                  "${ipCmd} netns del ${eSA host.namespace}"
                ];
              };
            };
          }) hosts));
        }
      ]);
    };
  });
}
