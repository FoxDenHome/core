{ nixpkgs, foxDenLib, ... }:
let
  util = foxDenLib.util;
  eSA = nixpkgs.lib.strings.escapeShellArg;

  hostType = with nixpkgs.lib.types; submodule {
    options = {
      dns = {
        name = nixpkgs.lib.mkOption {
          type = str;
        };
        zone = nixpkgs.lib.mkOption {
          type = str;
          default = "foxden.network";
        };
        ttl = nixpkgs.lib.mkOption {
          type = ints.positive;
          default = 3600;
        };
      };
      vlan = nixpkgs.lib.mkOption {
        type = ints.unsigned;
      };
      addresses = nixpkgs.lib.mkOption {
        type = listOf foxDenLib.types.ip;
      };
      routes = with nixpkgs.lib.types; nixpkgs.lib.mkOption {
        type = nullOr (listOf routeType);
        default = null;
      };
    };
  };

  routeType = with nixpkgs.lib.types; submodule {
    options = {
      Destination = nixpkgs.lib.mkOption {
        type = nullOr foxDenLib.types.ip;
        default = null;
      };
      Gateway = nixpkgs.lib.mkOption {
        type = nullOr foxDenLib.types.ipWithoutCidr;
        default = null;
      };
    };
  };

  getByName = (config: name: let
    namespace = "host-${name}";
  in {
    inherit name;
    namespace = namespace;
    namespacePath = "/run/netns/${namespace}";
    unit = "netns-host-${name}.service";
    resolvConf = "/etc/foxden/hosts/resolv.conf";
    suffix = util.mkHash8 name;
  } // config.foxDen.hosts.hosts.${name});
in
{
  getByName = getByName;

  nixosModule = ({ config, pkgs, foxDenLib, ... }:
  let
    hosts = map (getByName config) (nixpkgs.lib.attrsets.attrNames config.foxDen.hosts.hosts);
    ifcfg = config.foxDen.hosts.ifcfg;

    hostDriver = foxDenLib.hosts.drivers.${config.foxDen.hosts.driver};

    hostDriverConfig = hostDriver.build
      { inherit ifcfg hosts pkgs config; driverOpts = config.foxDen.hosts.driverOpts; };
  in
  {
    options.foxDen.hosts = {
      hosts = with nixpkgs.lib.types; nixpkgs.lib.mkOption {
        type = attrsOf hostType;
        default = {};
      };

      ifcfg = with nixpkgs.lib.types; {
        dns = nixpkgs.lib.mkOption {
          type = listOf foxDenLib.types.ipWithoutCidr;
        };
        addresses = nixpkgs.lib.mkOption {
          type = listOf foxDenLib.types.ip;
          default = [];
        };
        routes = nixpkgs.lib.mkOption {
          type = listOf routeType;
          default = [];
        };
        interface = with nixpkgs.lib.types; nixpkgs.lib.mkOption {
          type = str;
        };
        network = with nixpkgs.lib.types; nixpkgs.lib.mkOption {
          type = str;
        };
      };

      driver = with nixpkgs.lib.types; nixpkgs.lib.mkOption {
        type = enum (nixpkgs.lib.attrsets.attrNames foxDenLib.hosts.drivers);
      };

      driverOpts = nixpkgs.lib.mkOption {
        type = hostDriver.driverOptsType;
        default = {};
      };
    };

    config = {
      foxDen.hosts.ifcfg.network = nixpkgs.lib.mkDefault "40-${ifcfg.interface}";

      foxDen.dns.records = nixpkgs.lib.flatten (map
          (host: let
            mkRecord = (addr: nixpkgs.lib.mkIf (host.dns.name != "") {
              zone = host.dns.zone;
              name = host.dns.name;
              type = if (util.isIPv6 addr) then "AAAA" else "A";
              ttl = host.dns.ttl;
              value = util.removeIPCidr addr;
              horizon = if (util.isPrivateIP addr) then "internal" else "external";
            });
          in
          (map mkRecord host.addresses))
        hosts);

      environment.etc."foxden/hosts/resolv.conf".text = ''
        # Generated by foxDen
        ${nixpkgs.lib.concatMapStrings (ns: "nameserver ${ns}\n") config.foxDen.hosts.ifcfg.dns}
      '';

      systemd = nixpkgs.lib.mkMerge [
        hostDriverConfig.config.systemd
        {
          # Configure host/primary network/bridge
          network.networks."${config.foxDen.hosts.ifcfg.network}" = {
            name = ifcfg.interface;
            routes = ifcfg.routes;
            address = ifcfg.addresses;
            dns = ifcfg.dns;

            networkConfig = {
              DHCP = "no";
              IPv6AcceptRA = false;
            };
          };

          # Configure each host's NetNS
          services = (nixpkgs.lib.attrsets.listToAttrs (map (host: let
            ipCmd = eSA "${pkgs.iproute2}/bin/ip";
            ipInNsCmd = "${ipCmd} netns exec ${eSA host.namespace} ${ipCmd}";

            mkServiceInterface = hostDriverConfig.serviceInterface or (host: "host-${host.suffix}");
            serviceInterface = mkServiceInterface host;
            driverRunParams = { inherit ipCmd ipInNsCmd serviceInterface host; };

            netnsRoutes = (hostDriverConfig.routes or []) ++ (if host.routes != null then host.routes else ifcfg.routes);
          in
          {
            name = (nixpkgs.lib.strings.removeSuffix ".service" host.unit);
            value = {
              description = "NetNS ${host.namespace}";
              unitConfig = {
                After = [ "network-pre.target" ];
              };
              serviceConfig = {
                Type = "oneshot";
                RemainAfterExit = true;

                ExecStart = [
                  "-${ipCmd} netns del ${eSA host.namespace}"
                  "${ipCmd} netns add ${eSA host.namespace}"
                  "${ipInNsCmd} addr add 127.0.0.1/8 dev lo"
                  "${ipInNsCmd} addr add ::1/128 dev lo noprefixroute"
                  "${ipInNsCmd} link set lo up"
                ]
                ++ (hostDriverConfig.execStart driverRunParams)
                ++ [ "${ipCmd} link set ${eSA serviceInterface} netns ${eSA host.namespace}" ]
                ++ (map (addr:
                      "${ipInNsCmd} addr add ${eSA addr} dev ${eSA serviceInterface}")
                      host.addresses)
                ++ [ "${ipInNsCmd} link set ${eSA serviceInterface} up" ]
                ++ (map (route:
                      "${ipInNsCmd} route add " + (if route.Destination != null then eSA route.Destination else "default") + " dev ${eSA serviceInterface}" + (if route.Gateway != null then " via ${eSA route.Gateway}" else ""))
                      netnsRoutes);

                ExecStop =
                  (hostDriverConfig.execStop driverRunParams)
                  ++ [
                    "${ipCmd} netns del ${eSA host.namespace}"
                  ];
              };
            };
          }) hosts));
        }
      ];
    };
  });
}
